#!/usr/bin/env python3

# This analysis requires the per-base methylation stats generated by bsmap2
# This script bins genome with fixed-length intervals; remove low coverage bins; calculate methyl-C ratio
# You can define bin size and scan window size
# output format: 1. Chromosome; 2. bin start position; 3. bin end position;
# 4. CG methylation ratio; 5. CHG methylation ratio; 6. CHH methylation ratio;
# 7. reads of methylated CG; 8. reads of total CG; 9. reads of methylated CHG; 10. reads of total CHG;
# 11. reads of methylated CHH; 12. reads of total CHH

import argparse
import sys
from itertools import islice

def main():
	parser = argparse.ArgumentParser()
	parser.add_argument('-m' ,type=str, required=True, help="input file: summary of per base stats")
	parser.add_argument('-o',type=str, required=True, help="output file")
	parser.add_argument('-i', type=str, required=True, help="genome index file")
	parser.add_argument('-b', type=int, required=True, help="bin size")
	parser.add_argument('-s', type=int, required=True, help="step size")
	options = parser.parse_args()

	bin_dict = {}
	chromlen_dict = {}
	bin_index = 1
	with open(options.i, 'r') as f:
		for line in f:
			info = line.strip().split('\t')
			chrom = info[0]
			chromlen = int(info[1])
			chromlen_dict[chrom] = chromlen

	eff_CG_basket = 0
	eff_CHG_basket = 0
	eff_CHH_basket = 0
	CG_count_basket = 0
	CHG_count_basket = 0
	CHH_count_basket = 0
	basket_filter = 0
	previous_bin = 0

	with open(options.o, 'w') as f0:
		with open(options.m, 'r') as f1:
			for line in islice(f1,1,None):
				info = line.strip().split('\t')
				chrom = info[0]
				pos = int(info[1])
				strand = info[2]
				context = info[3]
				eff_CT = float(info[5])
				mC_count = float(info[6])
				if eff_CT >= 1:
					methylC_ratio = mC_count/eff_CT
				else:
					continue

				start_pos = pos - pos%options.b
				end_pos = min(start_pos + options.s, chromlen_dict[chrom])
				current_bin = pos//options.b

				if current_bin == previous_bin:
					if eff_CT >= 4:
						basket_filter += 1
					if context == 'CG':
						eff_CG_basket += eff_CT
						CG_count_basket += mC_count
					elif context == 'CHG':
						eff_CHG_basket += eff_CT
						CHG_count_basket += mC_count
					else:
						eff_CHH_basket += eff_CT
						CHH_count_basket += mC_count
				else:
					if basket_filter >=4:
						if eff_CG_basket > 0:
							CG_ratio = f'{min(CG_count_basket/eff_CG_basket, 1):.4f}'
						else:
							CG_ratio = "NA"
						if eff_CHG_basket > 0:
							CHG_ratio = f'{min(CHG_count_basket/eff_CHG_basket,1):.4f}'
						else:
							CHG_ratio = "NA"
						if eff_CHH_basket > 0:
							CHH_ratio = f'{min(CHH_count_basket/eff_CHH_basket,1):.4f}'
						else:
							CHH_ratio = "NA"
					
						f0.write(f'{chrom}\t'
							f'{start_pos - 100}\t'
							f'{end_pos - 100}\t'
							f'{CG_ratio}\t'
							f'{CHG_ratio}\t'
							f'{CHH_ratio}\t'
							f'{CG_count_basket}\t'
							f'{eff_CG_basket}\t'
							f'{CHG_count_basket}\t'
							f'{eff_CHG_basket}\t'
							f'{CHH_count_basket}\t'
							f'{eff_CHH_basket}\n')

					previous_bin = current_bin
					
					eff_CG_basket = 0
					eff_CHG_basket = 0
					eff_CHH_basket = 0
					CG_count_basket = 0
					CHG_count_basket = 0
					CHH_count_basket = 0
					
					if context == 'CG':
						eff_CG_basket += eff_CT
						CG_count_basket += mC_count
					elif context == 'CHG':
						eff_CHG_basket += eff_CT
						CHG_count_basket += mC_count
					else:
						eff_CHH_basket += eff_CT
						CHH_count_basket += mC_count

					basket_filter = 1 if eff_CT >= 4 else 0

if __name__ == "__main__":
	main()


