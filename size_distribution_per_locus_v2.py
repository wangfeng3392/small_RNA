#!/usr/bin/env python3
# This script calculates read counts of different sizes in DicerCall24 loci
# Prerequisites: Samtools, Python3, Pysam, R (if a heatmap will be generated);
# Prerequisites: DicerCall gff file generated by ShortStack;
# Prerequisites: BAM file (Alignment file) generated by ShortStack;
# Prerequisites: Before run this script, generate a .bai file by running: samtools index your_bam_file.bam

import argparse
from itertools import islice
import pysam

class SmallRNA_Properties:
	def __init__(self, lib, lib_size, locus, sRNA_size_count):
		self.lib = lib
		self.locus = locus
		self.sRNA_size_count = {12:0, 17:0, 18:0, 19:0, 20:0,
					 21:0, 22:0, 23:0, 24:0, 25:0,
					 26:0, 27:0, 28:0, 29:0, "other":0}
		self.lib_size = lib_size

	def locus_total(self):
		# Total read count of a small RNA locus
		self.locus_read_count = sum(self.sRNA_size_count.values())
		return self.locus_read_count

	def size_ratio(self):
		# Ratio of a size group in a small RNA locus
		if self.locus_total() == 0:
			#raise ValueError("Total read count is zero in this locus!")
			return {12:0, 17:0, 18:0, 19:0, 20:0,
					 21:0, 22:0, 23:0, 24:0, 25:0,
					 26:0, 27:0, 28:0, 29:0, "other":0}
		else:
			self.sRNA_size_ratio = {k: self.sRNA_size_count[k]*100/self.locus_total() for k in self.sRNA_size_count}
			return self.sRNA_size_ratio

	def sRNA_rpm(self):
		# Read per million trimmed reads
		self.locus_rpm = self.locus_total()*1000000/self.lib_size
		self.size_rpm = {k: self.sRNA_size_count[k]*1000000/self.lib_size for k in self.sRNA_size_count}
		return self.size_rpm, self.locus_rpm


def mapped_read_counter(bamfile):
	# Mapped read count for each library in a BAM file
	# A BAM file can contain reads from different libraries
	
	libraries = {}
	samfile = pysam.AlignmentFile(bamfile,'rb')
	for read in samfile:
		if read.is_unmapped == False:
			library = read.get_tag('RG')
			if library in libraries:
				libraries[library] += 1
			else:
				libraries[library] = 1
	return libraries



def hetsiRNA_loci(gff_file):
	# Retrieve hetsiRNA (DicerCall 23 and 24 and non-miRNA) loci
	
	hetsiRNA_list = []
	with open(gff_file,'r') as f:
		next(f) #skip the first line in the gff3 file
		for line in f:
			info = line.strip().split('\t')
			ID = info[8].split(';')[0].split('=')[1]
			DicerCall = info[8].split(';')[1].split('=')[1]
			miRNACall = info[8].split(';')[2].split('=')[1]
			locus = info[0] + ":" + info[3] + "-" +info[4]
			if miRNACall == "N" and DicerCall in ["23","24"]:
				hetsiRNA_list.append(locus)
	return hetsiRNA_list


def read_count_per_locus(bamfile, hetsiRNA_list, output):
	# Calculate read count of different sizes in each locus
	# Write the ratio of sRNA size group to a document to make heatmaps

	with open(output,'w') as f:

		libraries = {}
		library_sizes = mapped_read_counter(bamfile)
		# Calculate numbers of libraries and aligned read count per library
		
		default_count = {12:0, 17:0, 18:0, 19:0, 20:0,
					 	21:0, 22:0, 23:0, 24:0, 25:0,
					 	26:0, 27:0, 28:0, 29:0, "other":0}
		# Set dict for read count of different size species in each locus
		
		samfile = pysam.AlignmentFile(bamfile,'rb')
		# Open alignment file
		
		for locus in hetsiRNA_list:
			# get information about siRNA loci: chr, start, end
			Chr = locus.split(':')[0]
			Start = int(locus.split(':')[1].split('-')[0]) - 1
			End = int(locus.split(':')[1].split('-')[1])
			for library in library_sizes:
				libraries[library] = SmallRNA_Properties(library, library_sizes[library], locus, default_count)

			for read in samfile.fetch(Chr,Start,End):
				# loop through all alignments in this locus
				
				strand = '+' if read.is_reverse is False else '-'
				read_size = read.query_length
				library = read.get_tag('RG')

				if libraries[library].locus == '':
					# When the program starts to analyze a new locus
					libraries[library] = SmallRNA_Properties(library, library_sizes[library], locus, default_count)
					if read_size in [13,14,15,16] or read_size < 12 or read_size >= 30:
						libraries[library].sRNA_size_count['other'] += 1
					else:
						libraries[library].sRNA_size_count[read_size] += 1
				else:
					# Otherwise, add read count to existing dict
					if read_size in [13,14,15,16] or read_size < 12 or read_size >= 30:
						libraries[library].sRNA_size_count['other'] += 1
					else:
						libraries[library].sRNA_size_count[read_size] += 1
		
			
			# Print locus to output first
			f.write(f"{locus}\t")
			
			for library in libraries:
				
				locus = libraries[library].locus
				ratio = libraries[library].size_ratio()
				locus_rpm = libraries[library].sRNA_rpm()[1]

				
				# Print library, locus RPM, ratios of different size groups to output
				# Values for all libraries will be printed in one line
				f.write(f"{library}\t"
						f"{locus_rpm:.3f}\t"
						f"{ratio[12]:.2f}\t"
						f"{ratio[17]:.2f}\t"
						f"{ratio[18]:.2f}\t"
						f"{ratio[19]:.2f}\t"
						f"{ratio[20]:.2f}\t"
						f"{ratio[21]:.2f}\t"
						f"{ratio[22]:.2f}\t"
						f"{ratio[23]:.2f}\t"
						f"{ratio[24]:.2f}\t"
						f"{ratio[25]:.2f}\t"
						f"{ratio[26]:.2f}\t"
						f"{ratio[27]:.2f}\t"
						f"{ratio[28]:.2f}\t"
						f"{ratio[29]:.2f}\t"
						f"{ratio['other']:.2f}\t")
				
				# Reset locus and sRNA counts
				libraries[library].locus = ''
				libraries[library].sRNA_size_count = default_count
			
			# Move to the next line for a new locus
			f.write("\n")


def main():
	parser = argparse.ArgumentParser()
	parser.add_argument('--gff3', required=True, dest='gff_input')
	parser.add_argument('--bam', required=True, dest='bam_input')
	parser.add_argument('--size_ratio_output', dest='size_ratio_output')
	args = parser.parse_args()
	
	hetsiRNA_list = hetsiRNA_loci(args.gff_input)
	read_count_per_locus(args.bam_input, hetsiRNA_list, args.size_ratio_output)

if __name__ == "__main__":
	main()












